# -*- coding: utf-8 -*-
"""Assemblage

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKZIiWtKztl9mxthUItd0AkJHCljZSAv
"""

import json  
import random
import re
import requests
# import matplotlib.pyplot as plt
import nltk

from bs4 import BeautifulSoup
# from wordcloud import WordCloud

url = "https://www.timeout.com/music/50-best-love-songs"

req = requests.get(url)
print("getting url: %s" % url)
if req.status_code == 200:
    print("got result!")
   
else:
    print("something went wrong, response code %i" % req.status_code)

soup = BeautifulSoup(req.content, 'html.parser')

poem_elements = soup.find_all('h3', class_='_h3_cuogz_1')
print("Found %d things" % len(poem_elements))

songs_artists_producers = []

print("The first 15 songs:")
for i in poem_elements[:15]:
  print(i.text)

for i in poem_elements:
  if re.findall('‘([^"]*)’',i.text.split('by')[0]) and i.text.split('by')[1].strip():
    songs_artists_producers.append((re.findall('‘([^"]*)’',i.text.split('by')[0])[0] ,i.text.split('by')[1].strip() ))

with open("song_list.json", 'w') as my_file:                                  
   data_to_write = json.dumps(songs_artists_producers)                                                
   my_file.write(data_to_write)

with open("song_list.json", 'r') as my_file:  
  retrieved_postings = json.load(my_file)

def scrapeData(target_url):
  new_req = requests.get(target_url)

  print("getting url: %s" % target_url)
  if new_req.status_code == 200:
      print("Got result!")
      return new_req

      
  else:
      print("something went wrong, response code %i" % new_req.status_code)
      return None

def parser(data):

  if data:
    soup = BeautifulSoup(data.content, 'html.parser')
    
    return soup
  else:
    return None

def findTitle(soup):
  title_element = soup.find('title')
  title_text = title_element.text 
  return title_text

def getLyrics(soup):
  lyrics = ""
  song = soup.find_all('div', class_='Lyrics__Container-sc-1ynbvzw-6')
  for i in song:
    lyrics += re.sub(r"\[[^()]*\]" ,"", i.get_text(separator="\n").strip())+"\n"
  return lyrics

def saveToFile(title, lyrics):
  with open("songs.json", 'a') as my_file:                                  
     my_file.write(lyrics)

for i in retrieved_postings:
  target_url = 'https://genius.com/'+"-".join(i[1].split(" "))+"-"+"-".join(i[0].split(" "))+"-lyrics"
  data = scrapeData(target_url)
  soup = parser(data)
  if soup:
    title = findTitle(soup)
    print(title)
    lyrics = getLyrics(soup)
    saveToFile(title,lyrics)

with open("songs.json", 'r') as my_file:
  retrieved_songs = my_file.read()

from textblob import TextBlob        
import nltk
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')

source_text = retrieved_songs

processed_text = TextBlob(source_text)       
nouns = []                                  
verbs = []                                   
adjectives = []                             

for word, tag in processed_text.tags:
     if tag == "NN":              
        nouns.append(word)       
     elif tag == "VB":           
        verbs.append(word)
     elif tag == "JJ":           
        adjectives.append(word)

 


# wordcloud = WordCloud().generate(retrieved_songs)
# wordcloud = WordCloud(max_font_size=40).generate(" ".join(retrieved_songs.split(" ")))
# plt.figure()
# plt.imshow(wordcloud, interpolation="bilinear")
# plt.axis("off")
# plt.show()

urls = ["https://genius.com/Adele-hello-lyrics",   "https://genius.com/Metallica-nothing-else-matters-lyrics", "https://genius.com/Maroon-5-she-will-be-loved-lyrics","https://genius.com/One-direction-story-of-my-life-lyrics" ]

for url in urls:
  data = scrapeData(url)
  soup = parser(data)
  if soup:
    title = findTitle(soup)
    print(title,"\n\n")
    lyrics = getLyrics(soup)
  
  source_text = lyrics
  processed_text = TextBlob(source_text)      
  song_nouns = []                                  
  song_verbs = []                                   
  song_adjectives = [] 

  

  for word, tag in processed_text.tags:
    if tag == "NN" or tag=="NNP":              
        song_nouns.append(word)      
    elif tag == "VB":           
        song_verbs.append(word)
    elif tag == "JJ" or tag == "JJR":           
        song_adjectives.append(word)
  print("\n\n")
  for i in lyrics.split(" "):
    
    if i in song_nouns:
      print(random.choice(nouns), end = ' ')

    elif i in song_verbs:
      print(random.choice(verbs), end = ' ')

    elif i in song_adjectives:
      print(random.choice(adjectives), end = ' ')

    else:
      print(i, end = ' ')

  print("\n\n\n===============================\n\n\n")

# print(lyrics)

 